<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Generate Furnace Heat Images per Conditions</title>
    <!-- Add any CSS stylesheets or JavaScript libraries here -->
</head>
<body>

    <!-- HTML content for user input and button -->
    <div>Type conditions here:</div>
    <table>
        <tr>
            <td> Ng </td>
            <td> <input type="text" style="border:3px solid #F7730E;" value="0" id="testInput1"/> </td>
            <!-- Add other input fields for other conditions -->
        </tr>
        <!-- Add more rows for additional conditions -->
    </table>
    <button id="generate-button" class="py-button">Generate</button>

    <!-- Placeholder for displaying generated images -->
    <div id="image-container"></div>

    <!-- Python code block -->
    <section class="pyscript">
        <script type="py">

            // Import necessary Python modules
            import os
            import pandas as pd

            // Define the image directory
            var image_dir = r'C:\Users\alyss\Desktop\ITS365\knnminiproject\imgs';

            // Function to extract condition values from filenames and create DataFrame
            function extractConditionsAndSaveToCSV() {
                // Get a list of all files in the directory
                var image_files = os.listdir(image_dir);

                // Initialize lists to store extracted values
                var c_values = {
                    "ID": [],
                    "c1": [],
                    "c2": [],
                    "c3": [],
                    "c4": []
                };

                // Regular expression pattern to extract values
                var pattern = /c1-(\d+\.\d+)_c2-(\d+\.\d+)_c3-(\d+\.\d+)_c4-(\d+\.\d+)/;

                // Extract values for each image file
                for (var i = 0; i < image_files.length; i++) {
                    var filename = image_files[i];
                    var matches = filename.match(pattern);
                    if (matches) {
                        var image_id = parseInt(filename.match(/\d+/)[0]);  // Extract image ID from filename
                        c_values["ID"].push(image_id);
                        c_values["c1"].push(parseFloat(matches[1]));
                        c_values["c2"].push(parseFloat(matches[2]));
                        c_values["c3"].push(parseFloat(matches[3]));
                        c_values["c4"].push(parseFloat(matches[4]));
                    }
                }

                // Create a DataFrame to store c values
                var df_c_values = pd.DataFrame(c_values);

                // Save the DataFrame to a CSV file
                df_c_values.to_csv("pd_conditions_train.csv", index=False);
            }

            // Function to handle the "Generate" button click event
            function generateImages() {
                // Call the Python function to extract conditions and save to CSV
                extractConditionsAndSaveToCSV();

                // Add code to generate images based on conditions and display them
                // You can use the extracted conditions from the CSV file to generate images
            }

            // Event listener for the "Generate" button click event
            document.getElementById("generate-button").addEventListener("click", generateImages);

        </script>
    </section>

</body>
</html>
